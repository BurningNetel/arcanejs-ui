/*! elementjs 2016-06-12 */
class Element {
    constructor(type, className, id){
		this.element = document.createElement(type);
  
        if(id != null){
            this.element.id = id;
        }

        if (className != null) {
            this.element.className = className;
        }
      
      	this.children = new Array();
    }

    //innerText/HTML stuff
    getText() {
        return this.element.innerText;
    }

    setText(text) {
        this.element.innerText = text;
      	return this;
    }
  
  	clear(){
   		this.element.innerHTML = "";  
    }


    //Style operations
    get left() {
        return parseInt(this.element.style.left.replace("px", ""));
    }

    set left(val) {
        this.element.style.left = val + "px";
    }

    get top() {
        return parseInt(this.element.style.top.replace("px", ""));
    }

    set top(val) {
        this.element.style.top = val + "px";
    }

    get width() {
        let width = this.element.style.width;
        if (width == "") {
            return parseInt(styleWidth.replace("px", ""));
        } else {
            return this.element.offsetWidth;
        }
    }

    set width(val) {
        this.element.style.width = val + "px";
    }

    get height() {
        let height = this.element.style.height;
        if (height == "") {
            return parseInt(height.replace("px", ""));
        } else {
            return this.element.offsetHeight;
        }
    }

    set height(val) {
        this.element.style.height = val + "px";
    }


    //DOM operations
    addChild(child) {
      	this.children.push(child);
        this.element.appendChild(child.element);
    }

    show() {
        document.body.appendChild(this.element);
      	return this;
    }
  
  	hide() {
     	this.element.parentElement.removeChild(this.element); 
    }
  
  	addEventListner(name, callback){
     	this.element.addEventListner(name, callback); 
    }
  
    setAttribute(name, value){
		 this.element.setAttribute(name, value);
    }
  
  	set onClick(callback){
    	this.element.addEventListener("click", function() {
    		callback();
		}, false);
    }
}
class Br extends Element {
    constructor() {
        super("br");
    }
}
class Button extends Element {
    constructor(caption, className, id){
        if (className != null) {
            super("button", className, id);
        } else {
            super("button", "btn btn-primary");
        }

        if (caption == "&times;") {//innerHTML is a security risk, this is the only exception
            this.element.innerHTML = caption;
        } else {
            this.element.innerText = caption;
        }
    }
}
class Div extends Element {
    constructor(className, id) {
        super("div", className, id);
    }
}
class H1 extends Element {
    constructor(text) {
        super("h1");
      	this.setText(text);
    }
}
class H2 extends Element {
    constructor(text) {
        super("h2");
      	this.setText(text);
    }
}
class H3 extends Element {
    constructor(text) {
        super("h3");
      	this.setText(text);
    }
}
class Img extends Element {
    constructor(src, className, id) {
        super("img" ,className, id);
      	this.element.src = src;
    }
}
class Link extends Element {
    constructor(href, className, id){
	super("a", className, id);
      	if(href){
            this.element.href = href;
        }
    }
}

class Modal extends Div {
    constructor(title, closeButton, content, button){
		super("modal fade");
      	this.setAttribute("role", "dialog");
              
      	this.dialog = new Div("modal-dialog");
  		this.content = new Div("modal-content");
  		this.header = new Div("modal-header");
  		this.body = new Div("modal-body");
  		this.footer = new Div("modal-footer");
      	this.headerTitle = new Element("h4");
      	this.headerTitle.setText(title);
     
      	if(closeButton){
           	this.dismissButton = new Button("&times;", "close");
          	this.dismissButton.setAttribute("data-dismiss", "modal");
            this.header.addChild(this.dismissButton);	
        }
      
      	if(content != null){
    		this.body.addChild(content);
    	}
      
      	if(button != null){
      		this.footer.addChild(button);
    	}
      
      	this.addChild(this.dialog);
        this.dialog.addChild(this.content);
        this.content.addChild(this.header);
        this.header.addChild(this.headerTitle);
        this.content.addChild(this.body);
        this.content.addChild(this.footer);
      
		this.show();

        //TODO remove this jQuery nonsense
      	$(this.element).modal('show');

      	//LOL jQuery :')
      	let hax = this;
      	$(this.element).on('hidden.bs.modal', function () {
          	hax.hide();
        });
    }

  	hide(){
      	$(this.element).modal('hide');
    }
}

class NavBar extends Div {
    constructor(brand){
		super("navbar navbar-default navbar-fixed-top");
      	this.content = new Div("container");
      	this.addChild(this.content);
      	
      	this.header = new Div("navbar-header");
      	this.content.addChild(this.header);
      
      	this.brand = new Div("navbar-brand", "#");
      	this.brand.setText(brand);
      	this.header.addChild(this.brand);
      	
      	this.show();
    }
}

class Paragraph extends Element {
    constructor(text) {
        super("p");
      	this.setText(text);
    }
}
class Span extends Element {
    constructor(className, id) {
        super("span", className, id);
    }
}
class Textarea extends Element {
    constructor(text, className, id) {
        super("textarea", className, id);
      	//
      	this.element.value = text;
      	this.element.rows = 1;
    }
  
  	set autoResize(bool){
       	if(bool){      	
          	this.element.addEventListener('input', this.resizeEventHandler, false);
          	this.resize();
        } else {
        	this.element.removeEventListener('input',  this.resizeEventHandler, false); //Does this even work???
        }
    }
  
  	resize(){
      	this.element.style.height = 'auto';
      	this.element.style.height = this.element.scrollHeight+'px';
    }
  	
    resizeEventHandler (event) {
      	event.target.style.height = 'auto';
      	event.target.style.height = event.target.scrollHeight+'px';
      	return false;
    }
}